github-url: "https://github.com/davidtheclark/scut/blob/master/src"

categories:

  -
    category: general
    items:

      -
        name: hd-breakpoint
        type: &MO mixin only
        use-name: scut-hd-bp
        text: |
          Simple means to write effective resolution-based `@media`-queries, using `-o-min-device-pixel-ratio`, `-webkit-min-device-pixel-ratio`, and `min-resolution`.

        args:
          -
            variable: $ratio
            default: 1.3
            comment: A *minimum* resolution.

        references:
          -
            description: The involved Github discussion that resulted in HTML5 Boilerplate's HiDPI breakpoint
            url: https://github.com/h5bp/html5-boilerplate/issues/1127
          -
            description: Matt Thomas's post about Wordpress's HiDPI breakpoint (implemented in WordPress core 3.5)
            url: http://mattnt.com/2012/11/18/making-sense-of-hidpi-media-queries/
        examples:
          -
            html: |
              <p class="example-hd-bp">If you are using a retina screen, this paragraph will be blue &mdash; otherwise, a sad, sad gray.</p>
            show-html: false

      -
        name: hide-text
        type: &MP mixin and placeholder
        use-name: scut-hide-text
        references:
          -
            description: "L. Jeffrey Zeldman: \"Replacing the -9999px Hack (New Image Replacement)\""
            url: http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/

        text: |
          Include text in the markup while hiding it from view.

          This technique is most commonly used to provide (semantic, accessible, SEO-friendly, etc.) text that will be (visually) replaced with an image.

        examples:
          -
            html: |
              <p>The following image is hiding text:</p>
              <div class="example-hide-text">This text is hidden</div>
            show-html: true

      -
        name: selected
        type: *MO
        use-name: scut-selected
        args:
          -
            variable: $active
            default: "true"
            comment: Will the rules apply to the `:active` state?
        text: |
          Apply rules to `:hover`, `:focus`, and (optionally) `:active` states at the same time.

          *Don't forget to add a `tabindex` to any element that will need it for `:focus`.*
        examples:
          -
            html: |
              <p>The following button turns blue in all three states:<p>
              <p><button class="example-selected">Inspect Me!</button></p>
            show-html: false


  -
    category: layout
    items:

      -
        name: clearfix
        type: *MP
        use-name: scut-clearfix
        text: |
          Make an element adapt its height to fit floated children.
        references:
          -
            description: "Treehouse blog: \"CSS Tip: A Better Clearfix with Sass\""
            url: http://blog.teamtreehouse.com/a-better-clearfix-with-sass
          -
            description: "CSS-Tricks catalogs various clearfix hacks"
            url: http://css-tricks.com/snippets/css/clear-fix/
        examples:
          -
            html: |
              <div class="example-clearfix--container">
                <div class="example-clearfix--float">floated</div>
                <div class="example-clearfix--float">floated</div>
              </div>
            show-html: truer

      -
        name: fill
        type: *MP
        use-name: scut-fill
        text: |
          Make an element fill its parent.

          *Note: The parent-to-be-filled must be **positioned** &mdash; so add `position: relative` if the parent's position is not already `absolute` or `fixed`.*
        examples:
          -
            html: |
              <div class="example-fill--parent">
                Parent provides the border
                <div class="example-fill--child">
                  Child provides the background
                </div>
              </div>
            show-html: true

      -
        name: lists
        items:

          -
            name: unstyled-list
            type: *MP
            use-name: scut-list-unstyled
            text: |
              Remove styling (`margin`, `padding`, and `list-style-type`) from a list.
            examples:
              -
                html: |
                  <ul class="example-unstyled-list">
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                show-html: false

          -
            name: floated-list
            type: *MP
            use-name: scut-list-floated
            args:
              -
                variable: $in-media
                default: "false"
                comment: &IM Go with `true` if using the mixin within a `@media`-query, to avoid a futile attempt to `@extend` within it.
            text: |
              Float the items of an unstyled list, to the left.

              Use a floated list instead of an inline list when you want your list items snuggled right next to each other.
            examples:
              -
                html: |
                  <ul class="example-floated-list">
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                show-html: false

          -
            name: inline-list
            type: *MP
            use-name: scut-list-inline
            text: |
              Inline the items of an unstyled list.

              Use an inline list if you don't mind your list items spaced out a little, like inline words.

            examples:
              -
                html: |
                  <ul class="example-inline-list">
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                show-html: false

          -
            name: punctuated-list
            type: &MOP mixin with extension placeholders
            use-name: scut-list-punctuated
            args:
              -
                variable: $divider
                default: "\", \""
                comment: Choose your punctuation.
              -
                variable: $display
                default: inline
                comment: Change to `inline-block` if you don't want your list items spanning lines.
              -
                variable: $in-media
                default: "false"
                comment: *IM
            text: |
              Keep your HTML semantic and your punctuation traditional.

              Since the most common punctuated list uses commas, commas are default and the comma list is available as its own placeholder:

              - **`%scut-list-comma`**

            examples:
              -
                html: |
                  <ul class="example-punctuated-list">
                    <strong>Comma list: </strong>
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                  <ul class="example-semicolon-list">
                    <strong>Semicolon list: </strong>
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                  <ul class="example-avant-garde-list">
                    <strong>Avant-garde list: </strong>
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                show-html: false

          -
            name: divided-list
            type: *MOP
            use-name: scut-list-divided
            args:
              -
                variable: $divider
                default: "\"|\""
                comment: Choose your punctuation.
              -
                variable: $gap
                default: 0.5em
                comment: The space separating your dividers from the your list items.
              -
                variable: $in-media
                default: "false"
                comment: *IM
            text: |
              A floated list with punctuation between each list item.

              The two most common variations each have their own placeholders:

              - **`%scut-list-bar`**
              - **`%scut-list-breadcrumb`**

              But, of course, all things are possible.

            examples:
              -
                html: |
                  <ul class="example-divided-list">
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                  <ul class="example-breadcrumb-list">
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                  <ul class="example-adding-list">
                    <li>List item</li>
                    <li>List item</li>
                    <li>List item</li>
                  </ul>
                show-html: false

      -
        name: positioning
        items:

          -
            name: coordinates
            type: *MO
            use-name: scut-coordinates
            args:
              -
                variable: $coordinates
                default: [n n n n]
                comment: |
                  A list: `top`, `right`, `bottom`, and `left` coordinates.
            text: |
              A shortcut for assigning coordinates.

              You may want to use this mixin on its own &mdash; but you probably want to use one of the extensions below, which will pair your coordinates with a `position` value.

              Some guidlines: **`n` (the default value) indicates "nothing"** &mdash; so the coordinate is ignored, no rule is created. **`a` can abbreviate `auto`** (both will work). **All four values must be passed**: so use `n` as needed. See the examples below.


          -
            name: absolute-positioning
            type: *MO
            use-name: scut-absolute
            args:
              -
                variable: $coordinates
                default: [n n n n]
                comment: &SEEC "<a href=\"#coordinates\">See information about `coordinates` above.</a>"
            text: |
              Absolutely position an element and assign its coordinates, all in one line of SCSS. You'll save years of your life.
            examples:
              -
                html: |
                  <div class="example-absolute">
                    <div class="example-absolute--i m-left">Top left</div>
                    <div class="example-absolute--i m-right">Bottom right</div>
                  </div>
                show-html: false

          -
            name: relative-positioning
            type: *MO
            use-name: scut-relative
            args:
              -
                variable: $coordinates
                default: [n n n n]
                comment: *SEEC
            text: |
              Relatively position an element and assign its coordinates, all in one line of SCSS.
            examples:
              -
                html: |
                  <p>Some of <span class="example-relative--1">these</span> words <span class="example-relative--2">are</span> positioned in <span class="example-relative--3">strange</span> ways.</p>
                show-html: false

          -
            name: fixed-positioning
            type: *MO
            use-name: scut-fixed
            args:
              -
                variable: $coordinates
                default: [n n n n]
                comment: *SEEC
            text: |
              Fixedly (*fix-ed-lee*) position an element and assign its coordinates.

              I won't provide an example because it would spoil the documentation. Look at those above: you'll get the picture.

      -
        name: ratio-box
        type: *MO
        use-name: scut-ratio-box
        args:
          -
            variable: $ratio
            default: 100%
            comment: Height as a percentage of width.
          -
            variable: $inner
            default: ".scut-inner"
            comment: &IE CSS selector for the inner element. See below.
        text: |
          Give an element with unknown or fluid width a fixed aspect ratio.

          Implementation involves a few prerequisite elements &mdash; here's what you need:

          - **A container element**, whose width (which may be fluid) will determine the width of your ratio-box.
          - **The ratio-box's outer element**, to which the mixin applies.
          - **The ratio-box's inner element**, whose selector must be passed to the mixin as the `$inner` (second) argument, and whose content will show the styling.

          The examples should demonstrate.
        examples:
          -
            html: |
              <p>The containers are different widths, but the ratio-boxes maintain a 16:9 ratio.</p>
              <div class="example-ratio--c m-1">
                <div class="example-ratio--outer">
                  <div class="example-ratio--inner">
                    <!-- Content! -->
                  </div>
                </div>
              </div>
              <div class="example-ratio--c m-2">
                <div class="example-ratio--outer">
                  <div class="example-ratio--inner">
                    <!-- Content! -->
                  </div>
                </div>
              </div>
            show-html: true

      -
        name: size
        type: *MO
        use-name: scut-size
        args:
          -
            variable: $size
            default: &ND no default
            comment: A single value will make a square; a list of two (`width` then `height`) will make a rectangle.
        text: |
          Define both of an element's dimensions in one fell swoop.

          If a single value is passed, it will be applied to both `width` and `height`, producing a square. To make a rectangle, pass a two-value list: `width` then `height`.
        examples:
          -
            html: |
              <div class="example-size m-square">A square</div>
              <div class="example-size m-rectangle">A rectangle</div>
            show-html: false

      -
        name: vertically-center
        items:

          -
            name: vertically-center-via-line-height
            type: *MO
            use-name: scut-vcenter-lh
            args:
              -
                variable: $height
                default: *ND
            text: |
              Vertically center text by equalizing an element's `height` and `line-height`.

              Although this method is nice and simple, requiring no extra `<div>`s, it is limited: **it only works for inline content (i.e. text) that will not exceed a single line.** So it's good for buttons and headings with backgrounds and things like that.

              If you need to vertically center something else, try one of the mixins below.

            examples:
              -
                html: |
                  <p class="example-vcenter-lh">
                    Vertically centered text.
                  </p>
                show-html: false

          -
            name: vertically-center-via-inline-block
            type: *MO
            use-name: scut-vcenter-ib
            args:
              -
                variable: $inner
                default: ".scut-inner"
                comment: *IE
            text: |
              Vertically center *an inner element* with the `inline-block` method.

              **This method requires a container and an inner element.** The mixin applies to the container; the to-be-centered inner element is passed (by its selector) as an argument.

              *A word of caution: Because `inline-block` results in some unpredictable word-like spacing, this method doesn't work well if you require exactitude* (e.g. your inner element has a 100% width).* If you require exactitude and nothing stands in the way of your container element having `display: table`, try that method (below).

            examples:
              -
                html: |
                  <div class="example-vcenter-ib">
                    <p class="example-vcenter-ib--inner">
                      A vertically centered element.
                    </p>
                  </div>
                show-html: true
            references:
              -
                description: "CSS-Tricks: \"Centering in the Unknown\""
                url: http://css-tricks.com/centering-in-the-unknown/

          -
            name: vertically-center-via-table-display
            type: *MO
            use-name: scut-vcenter-td
            args:
              -
                variable: $inner
                default: ".scut-inner"
                comment: *IE
            text: |
              Vertically center *the content of an inner element* with the `display: table` method.

              **This method requires a container and an inner element.** The mixin applies to the container; the to-be-centered inner element is passed (by its selector) as an argument.

              Whatever goes into the inner container, whether text or blocks, will be vertically centered.

            examples:
              -
                html: |
                  <div class="example-vcenter-td">
                    <p class="example-vcenter-td--inner">
                      Text.
                    </p>
                  </div>
                  <div class="example-vcenter-td">
                    <div class="example-vcenter-td--inner">
                      <div class="example-vcenter-td--box">Box</div>
                    </div>
                  </div>
                show-html: true
            references:
              -
                description: "CSS-Tricks: \"Centering in the Unknown\""
                url: http://css-tricks.com/centering-in-the-unknown/





      # - name: vertically-center

  # - name: shapes
  #   items:
  #     - name: circle
  #     - name: foursquare
  #     - name: triangle

  # - name: typography
  #   items:
  #     - name: font-face
  #     - name: indented-paragraphs
  #     - name: link-styles

