/*==========================
DO NOT ALTER THIS DOCUMENT!

It is a concatenation of the SCSS files inside `tests/style/scss/tests`. CREATE TEST STYLESHEETS IN `TESTS/STYLE/SCSS/TESTS`, NOT HERE. If you put them here, they will be overwritten when somebody does things the right way and grunt concatenates once again. (See the `concat` task in the Gruntfile to fully understand.)
==========================*/

.eg-bookends {
  &.v-1 {
    @include scut-bookends {
      content: "--";
    }
  }
  &.v-2 {
    @include scut-bookends($content: "--");
  }
  &.v-3 {
    @include scut-bookends (2em) {
      content: "#{$scut-vellip} #{$scut-vellip} #{$scut-vellip}";
      color: red;
    }
    &:hover {
      @include scut-bookends (false) {
        color: blue;
      }
    }
  }
  &.v-4 {
    font-size: 3em;
    @include scut-bookends(false, $scut-laquo $scut-raquo) {
      position: relative;
      bottom: 0.08em;
    }
  }
  &.v-5 {
    display: inline-block;
    padding: 1em;
    border: 1px solid;
    @include scut-bookends {
      content: $scut-sect;
    }
  }
  &.v-6 {
    @include scut-bookends(2em, $scut-whibull $scut-bull) {
      font-size: 3em;
      vertical-align: middle;
    }
  }
}

@mixin scut-borders (
  $border: 1px solid,
  $sides: y n
) {

  $top: nth($sides, 1);
  $right: nth($sides, 2);
  $bottom: null;
  $left: null;

  @if length($sides) == 2 {
    $bottom: nth($sides, 1);
    $left: nth($sides, 2);
  }
  @else if length($sides) == 4 {
    $bottom: nth($sides, 3);
    $left: nth($sides, 4);
  }


  @if $top == y {
    border-top: $border;
  }
  @if $right == y {
    border-right: $border;
  }
  @if $bottom == y {
    border-bottom: $border;
  }
  @if $left == y {
    border-left: $border;
  }

}

.borders {
  display: inline-block;
  margin-bottom: 1em;
  padding: 1em;
  &.v-1 {
    @include scut-borders;
  }
  &.v-2 {
    @include scut-borders($sides: y y n n);
  }
  &.v-3 {
    @include scut-borders(5px solid red);
  }
}

.vcenter-abs-c {
  border: 5px solid;
  @include scut-size(20em);
  position: relative;
}

.vcenter-abs {
  @include scut-center-absolutely(7em 30px);
  background: gray;
}

.css-char {

margin-bottom: 1em;

&:after {
  display: inline-block;
  margin-left: 1em;
}

// insert list below, then
// replace ^(\$scut-)(.*?)(:.*;)$
// with &.m-scut-$2:after { content: $scut-$2; }\n

// quotation mark "
&.m-scut-quot:after { content: $scut-quot; }

// left single curly quote ‘
&.m-scut-lsquo:after { content: $scut-lsquo; }

// right single curly quote ’
&.m-scut-rsquo:after { content: $scut-rsquo; }

// left double curly quote “
&.m-scut-ldquo:after { content: $scut-ldquo; }

// right double curly quote ”
&.m-scut-rdquo:after { content: $scut-rdquo; }

// left single angle quote (guillemet) ‹
&.m-scut-lsaquo:after { content: $scut-lsaquo; }

// right single angle quote (guillemet) ›
&.m-scut-rsaquo:after { content: $scut-rsaquo; }

// left double angle quote (guillemet) «
&.m-scut-laquo:after { content: $scut-laquo; }

// right double angle quote (guillemet) »
&.m-scut-raquo:after { content: $scut-raquo; }


// em dash (mutton) — [should look longer]
&.m-scut-mdash:after { content: $scut-mdash; }

// en dash (nut) – [between a hyphen and an em dash in length]
&.m-scut-ndash:after { content: $scut-ndash; }


// ampersand &
&.m-scut-amp:after { content: $scut-amp; }

// greater than >
&.m-scut-gt:after { content: $scut-gt; }

// less than <
&.m-scut-lt:after { content: $scut-lt; }

// non-breaking space [nothing to see]
&.m-scut-nbsp:after { content: $scut-nbsp; }


// section sign (double S, hurricane, sectional symbol, the legal doughnut, signum sectiōnis) §
&.m-scut-sect:after { content: $scut-sect; }

// paragraph symbol (pilcrow) ¶
&.m-scut-para:after { content: $scut-para; }


// middot (interpunct, interpoint) ·
&.m-scut-middot:after { content: $scut-middot; }

// o-slash (slashed o) Ø
&.m-scut-oslash:after { content: $scut-oslash; }

// bullet •
&.m-scut-bull:after { content: $scut-bull; }

// white bullet ◦
&.m-scut-whibull:after { content: $scut-whibull; }

// horizontal ellipsis …
&.m-scut-hellip:after { content: $scut-hellip; }

// vertical ellipsis ⋮
&.m-scut-vellip:after { content: $scut-vellip; }

// midline horizontal ellipsis ⋯
&.m-scut-midhellip:after { content: $scut-midhellip; }


// up-pointing triangle ▲
&.m-scut-utri:after { content: $scut-utri; }

// down-pointing triangle ▼
&.m-scut-dtri:after { content: $scut-dtri; }

// left-pointing triangle ◀
&.m-scut-ltri:after { content: $scut-ltri; }

// right-pointing triangle ▶
&.m-scut-rtri:after { content: $scut-rtri; }

// up-pointing small triangle ▴
&.m-scut-ustri:after { content: $scut-ustri; }

// down-pointing small triangle ▾
&.m-scut-dstri:after { content: $scut-dstri; }

// left-pointing small triangle ◂
&.m-scut-lstri:after { content: $scut-lstri; }

// right-pointing small triangle ▸
&.m-scut-rstri:after { content: $scut-rstri; }

// diamond ◆
&.m-scut-diamond:after { content: $scut-diamond; }

// fisheye ◉
&.m-scut-fisheye:after { content: $scut-fisheye; }

// bullseye ◎
&.m-scut-bullseye:after { content: $scut-bullseye; }

// circle ●
&.m-scut-circle:after { content: $scut-circle; }


}

.color-swap {
  display: inline-block;
  padding: 1em 2em;
  border: 2px solid;
  margin: 0 2em 2em 0;

  &.m-1 {
    @include scut-color-swap(blue, red, 1s);
    font-size: 2em;
    font-weight: bold;
  }

  &.m-2 {
    @include scut-color-swap(red blue, black yellow, 0.5s);
  }

  &.m-3 {
    @include scut-color-swap(blue, red, 0.3s, true);
    color: white;
  }

  &.m-4 {
    @include scut-color-swap(blue, black, false, true);
  }

}

@mixin scut-equal-columns (
  $selector: ".scut-inner"
) {

  display: table;

  & > #{$selector} {
    display: table-cell;
    @content;
  }

}

.row {
  @include scut-equal-columns {
    padding: 2em;
  }
  .m-1 {
    background: red;
    width: 25%;
  }
  .m-2 {
    width: 25%;
  }
  .m-3 {
    background: blue;
    width: 50%;
  }
}

.hanging-indent {
  margin: 1em 0;
  p {
    width: 10em;
  }

  &.m-1 {
    p {
      @extend %scut-hanging-indent;
    }
  }

  &.m-2 {
    p {
      @include scut-hanging-indent(2em);
    }
  }

}

.key-val {
  width: 400px;

  &.m-1 {
    @include scut-key-val;
  }

  &.m-2 {
    @include scut-key-val("\2014", 1em, 2em, 1em, 1em);
  }

  &.m-3 {
    @include scut-key-val($indent: 4em, $spacing: 0.3em);
    dt {
      font-weight: bold;
    }
  }

}

.list-divided {

  &.v-1 {
    @extend %scut-list-bar;
  }

  &.v-2 {
    @include scut-list-divided("", 2em, right, 2em) {
      background: red;
      font-size: 2em;
      width: 2em;
    }
  }

  &.v-3 {
    @include scut-list-divided("//", 10px, right);
  }

  margin: 0 0 2em 0 !important;


}

.list-floated {

  &.v-1 {
    @include scut-list-floated(1em);
  }

  &.v-2 {
    @include scut-list-floated(30px);
  }

  &.v-3 {
    @include scut-list-floated(10px, right);
  }

}

.list-punctuated {

  &.v-1 {
    @extend %scut-list-comma;
  }

}

.opacity-container {
  @include scut-size(10em);
  border: 5px solid;
  position: relative;
}

.opacity-el {
  @extend %scut-fill;
  background: black;
  @include scut-opacity(0.5);
}

.pixels-ems {
  background: gray;
  margin-bottom: 1em;

  &.m-1 {
    width: scut-em(300);
  }
  &.m-2 {
    width: 300px;
  }

  &.m-3,
  &.m-4 {
    font-size: 20px;
  }
  &.m-3 {
    width: scut-em(400, 20px);
  }
  &.m-4 {
    width: 400px;
  }

  &.m-5,
  &.m-6 {
    font-size: 2em;
  }
  &.m-5 {
    width: scut-em(500, 2em);
  }
  &.m-6 {
    width: 500px;
  }

}

.ratio-box {
  background: gray;
  width: 20em;
  &.v-1 {
    @include scut-ratio-box(3/2);
  }
}


.side-lined {
  background: #eee;
  margin-bottom: 1em;

  &.m-1 {
    @extend %scut-side-lined;
    font-size: 3em;
  }

  &.m-2 {
    @include scut-side-lined(5px, 20px, blue, double, 2px);
    font-size: 2em;
    width: 20em;
  }

  &.m-3 {
    @include scut-side-lined(4px, 30px, $color: blue, $style: double, $double: 10px, $v-adjust: 3px);
    font-size: 2em;
    line-height: 2;
    width: 10em;
  }

}

@include scut-sticky-footer(15em);

.scut-sticky {
  background: black;
  color: white;
}