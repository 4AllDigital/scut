"version": "0.9.1"
github-url: "https://github.com/davidtheclark/scut/blob/v"
github-home: "https://github.com/davidtheclark/scut"
codepen-url: "http://codepen.io/davidtheclark/pen/FhqGc"

old-versions:

categories:

  # General item fields --
  # name: Underscores translate to spaces; hyphens stay hyphens.
  #   The utility's example stylesheet's filename should match
  #   the `name` provided here.
  # type: Use one of the existing types.
  # use-name: The name of the mixin/placeholder -- what the user
  #   will actually type, including the scut- prefix.
  # args: A list of arguments, in order. Each argument includes
  #   the following fields:
  #   - variable: The name of the variable, including the $ sign
  #     at the beginning.
  #   - default: Any default value. If there is no default, do not
  #     include this field. If the value is 0 or false, make sure
  #     to wrap it in quotation marks, or YAML won't get it.
  #   - comment (markdown): A comment about the variable.
  # contentblock: If the mixin accepts a content block, explain here
  #    what that content block will affect.
  # text (markdown): Text to explain the utility.
  # example:
  #   - html: The HTML code for the example
  #   - show-html: Set to `true` if the HTML should be shown in the
  #     example.
  #   *** A STYLESHEET FOR THE EXAMPLE IS EXPECTED IN
  #     `DOCS/DEV/ASSETS/SCSS/EXAMPLES` WITH THE SAME NAME AS THAT
  #     GIVEN TO THIS ITEM. Within that stylesheet, code between the
  #     comments `/* hidden rules */` and `/* end hidden rules */`
  #     will not be displayed. ***
  # references:
  #   - description: Display text for the reference link.
  #   - url: URL for the referene link.

  -
    category: layout
    items:

      -
        name: center_block
        type: *MDP
        use-name: scut-center-block
        args:
          -
            variable: $max-width
            default: "false"
            comment: |
              A `max-width` value for the to-be-centered block.
        text: |
          You, being wise, probably know that setting `margin-left: auto; margin-right: auto;` on a block element with a defined width will center that element. You probably do it all the time.

          So why a utility?

            - To make sure you're setting `margin-left` and `margin-right` when that's all you need to set &mdash; instead of also overriding `margin-top` and `margin-bottom` with a rule like `margin: 0 auto;`.
            - To organize and name the pattern, describing what is being done &mdash; you are *centering a block* &mdash; whereas `margin: auto;` does not explain itself.
            - To provide a little handy shortcut for the all-too-common pattern of setting `auto` left and right margins along with a `max-width`. (`max-width` instead of `width`, so the element shrinks with the viewport, if it comes to that &mdash; I find myself doing it that way most often.)
        example:
          html: |
            <div class="eg-center-block m-1">Variation 1</div>
            <div class="eg-center-block m-2">Variation 2</div>

      -
        name: center_transform
        type: &MOP mixin, with extension placeholder(s)
        use-name: scut-center-transform
        args:
          -
            variable: $axis
            default: "false"
            comment: |
              Leave `false` to center on both axes; or set to `x` or `y` to center on one axis only.
        compatibility: |
          This utility uses a CSS `transform`, so will not work with IE8. Also note that `transform` requires vendor prefixes, which are included in the utility.
        text: |
          Center an element **without fixed dimensions**, vertically, horizontally, or both ways.

          (If your element *does* have fixed dimensions on each axis you wish to center, you may enjoy the primitive browser support and vendorprefixlessness of <a href="#center_absolutely">`scut-center-absolutely`</a>, above.)

          Be warned: *This method uses `position: absolute`, so the parent within which you'll be centering must have a `position` value other than `static`*.

          If you pass no arguments, both axes get the treatment; or you can pass `x` or `y` to center on one axis only.

          These three varieties are also available with three extension placeholders:

          - **`%scut-center-transform`**
          - **`%scut-center-tranform-x`**
          - **`%scut-center-transform-y`**

          Also, notice that an alias is provided for vertical centering: <a href="#v-center_transform">`scut-vcenter-tt`</a> (fitting the `vcenter` naming convention).
        example:
          html: |
            <div class="eg-center-transform-container">
              <div class="eg-center-transform m-1">
                Variation 1
              </div>
            </div>
            <div class="eg-center-transform-container">
              <div class="eg-center-transform m-2">
                Variation 2
              </div>
            </div>
            <div class="eg-center-transform-container">
              <div class="eg-center-transform m-3">
                Variation 3
              </div>
            </div>
            <div class="eg-center-transform-container m-large">
              <div class="eg-center-transform m-4">
                <p>Variation 4</p>
                <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p>
              </div>
            </div>
        references:
          -
            description: "CSS-Tricks: \"Centering Percentage Width/Height Elements\""
            url: http://css-tricks.com/centering-percentage-widthheight-elements/

      -
        name: clearfix
        type: *MP
        use-name: scut-clearfix
        text: |
          Make an element adapt its height to fit floated children, and clear floats in both directions.
        references:
          -
            description: "Treehouse blog: \"CSS Tip: A Better Clearfix with Sass\""
            url: http://blog.teamtreehouse.com/a-better-clearfix-with-sass
          -
            description: "CSS-Tricks catalogs various clearfix hacks"
            url: http://css-tricks.com/snippets/css/clear-fix/
          -
            description: "Nicholas Gallagher: \"A New Micro Clearfix Hack\""
            url: http://nicolasgallagher.com/micro-clearfix-hack/
        example:
          html: |
            <div class="eg-clearfix-container">
              <div class="eg-clearfix-floater">floated</div>
              <div class="eg-clearfix-floater">floated</div>
            </div>
          show-html: true

      -
        name: fill
        type: *MP
        use-name: scut-fill
        args:
          -
            variable: $width-height
            default: false
            comment: |
              Use 100% width and height of zero coordinates on all sides. See description and example below.
        text: |
          Make an element fill its parent.

          This utility provides two methods for filling. Both position the element absolutely. Both set `top: 0` and `left: 0`. Then:

          - The default method, with `$width-height: false`, applies `right: 0; bottom: 0;` &mdash; so all four coordinates are `0`. **The default method works for "non-replaced" HTML elements (most of them).**
          - The width-height method, with `$width-height: true`, applies `width: 100%; height: 100%`. **The width-height method works the same for "replaced" and "non-replaced" HTML elements; *but this method can run into problems if you don't use `box-sizing: border-box` and the parent element has borders or padding*** (even with `border-box`, problems occasionally arise).

          To learn more about "replaced" vs. "non-replaced" elements, have a look at [this Sitepoint article on the subject](http://reference.sitepoint.com/css/replacedelements). Basically, "replaced" elements are those that have intrinsic dimensions determined by their content &mdash; examples include form elements (e.g. `input`, `textarea`, `button`, `selected`), media elements (e.g. `img`, `video`), `iframe` elements, and probably others I don't know about. For replaced elements, you need to manually set whatever dimensions you want to control: just positioning absolutely and setting all coordinates won't do. See the example below.

          And note this: Because this mixin positions the element absolutely, *the parent-to-be-filled must be **positioned*** &mdash; meaning that you must assign `position: relative` to the parent if its position is not already `absolute` or `fixed`.

        example:
          html: |
            <p>Default method:</p>
            <div class="eg-fill-container">
              Parent provides the border
              <div class="eg-fill m-1">
                Child provides the background
              </div>
            </div>
            <p>Default method <em>not working</em> with an <code>&lt;img&gt;</code> element (to illustrate the issue):</p>
            <div class="eg-fill-container">
              <img src="http://placehold.it/200x100" class="eg-fill m-2" alt="placeholder">
            </div>
            <p>Width-height method working with an <code>&lt;img&gt;</code> element:</p>
            <div class="eg-fill-container">
              <img src="http://placehold.it/200x100" class="eg-fill m-3" alt="placeholder">
            </div>
          show-html: true

      -
        name: fonticon_label
        type: *MO
        use-name: scut-fonticon-label
        args:
          -
            variable: $font
            comment: The name of your icon font
          -
            variable: $glyph
            comment: The Unicode character code for a specific icon from your icon font (please feel free to use variables)
          -
            variable: $space
            default: 0.25em
            comment: Spacing between the icon and the label
          -
            variable: $side
            default: before
            comment: |
              `before` or `after`, translating to the pseudo-element for the icon &mdash; so on which side of the label do you want the icon?
        contentblock: |
          A content block passed to this mixin will be applied to the icon (either the `:before` or `:after` pseudo-element).
        text: |
          Pair the icons from your rad icon fonts with text labels, using semantic HTML and no extraneous elements.

          By default, icons are grafted on as `inline-block` pseudo-elements, vertically centered with the label. The mixin also takes care of some common needs: it sets the `font-style` and `font-weight` to `normal` and `-webkit-font-smoothing` to `antialiased`.

          Icons can be placed on the left or right of the label and spaced according to your learn&egrave;d discretion. Additional customization is possible by either passing a content block or adding rules to the relevant pseudo-element.

          The examples below illustrate some of the possibilities.

        example:
          html: |
            <p><button class="eg-fonticon-label m-1">Play &amp; Pause</button></p>
            <p><button class="eg-fonticon-label m-2">Stop</button></p>
            <p><button class="eg-fonticon-label m-3">Fast Forwards</button></p>
            <p><button class="eg-fonticon-label m-4">Rewind</button></p>
          show-html: true

      -
        group-start: lists
        name: list_unstyled
        type: *MDP
        use-name: scut-list-unstyled
        args:
          -
            variable: $no-margin
            default: true
            comment: If `true`, top and bottom margins will be removed from the list.
        text: |
          Remove default styling from a list (`padding-left`, `list-style-type`, and optionally `margin-top` and `margin-bottom`).

        example:
          html: |
            <ul class="eg-unstyled-list m-1">
              <li>list item</li>
              <li>list item</li>
              <li>list item</li>
            </ul>
            <ul class="eg-unstyled-list m-2">
              <li>list-with-margins item</li>
              <li>list-with-margins item</li>
              <li>list-with-margins item</li>
            </ul>

      -
        name: list_custom
        type: *MO
        use-name: scut-list-custom
        args:
          -
            variable: $content
            default: "\"\\2022\" (bullet)"
            comment: |
              A character to mark list items; *or* enter `count` to indicate that you want to use a counter, optionally followed by 1) a string to follow the counter, and 2) a `list-style-type` for the counter.
          -
            variable: $label-width
            default: 0.75em
            comment: |
              A width for the list-item markers.
          -
            variable: $pad
            default: 0
            comment: |
              Left-padding *before* the list-item marker.
          -
            variable: $no-margin
            default: "false"
            comment: If `true`, top and bottom margins will be removed from the list. *Note that the default here is `false`, unlike the other list mixins.*
        content: |
          A content block passed to this mixin will be applied to the list-item markers.
        text: |
          Fully customize your list-item markers &mdash; both characters and counters.

          This utility creates the list-item marker as an absolutely positioned `:before` psuedo-element, which can be given any `content` you'd like and styled just like any other element.

          Pass a string or unicode value as `$content` and thing should explain themselves. If you want a counter, pass `count`, optionally followed by 1) a string to follow the counter (e.g. in this list I'm using ")" after the counter), and 2) a `list-style-type` for the counter (refer to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type">MDN's reference list</a>).

          Spacing is set with the `$marker-width` and `$pad` arguments. And any amount of customization can happen in the `@content` block.

          Refer to the examples, please, for further clarification. Please.

        example:
          html: |
            <ul class="eg-list-custom m-1">
              <li>short item</li>
              <li>medium item medium item medium item medium item</li>
              <li>long item long item long item long item long item long item long item long item long item long item long item long item long item</li>
            </ul>
            <ul class="eg-list-custom m-2">
              <li>short item</li>
              <li>medium item medium item medium item medium item</li>
              <li>long item long item long item long item long item long item long item long item long item long item long item long item long item</li>
            </ul>
            <ul class="eg-list-custom m-3">
              <li>short item</li>
              <li>medium item medium item medium item medium item</li>
              <li>long item long item long item long item long item long item long item long item long item long item long item long item long item</li>
            </ul>
            <ul class="eg-list-custom m-4">
              <li>short item</li>
              <li>medium item medium item medium item medium item</li>
              <li>long item long item long item long item long item long item long item long item long item long item long item long item long item</li>
            </ul>
        references:
          -
            description: "CSS-Tricks: \"Numbering In Style\""
            url: "http://css-tricks.com/numbering-in-style/"
          -
            description: "Gabriele Romanato: \"How To Benefit From CSS Generated Content and Counter\" (<cite>Smashing Magazine</cite>)"
            url: "http://coding.smashingmagazine.com/2013/04/12/css-generated-content-counters/"
          -
            description: "MDN: \"Using CSS Counters\""
            url: "https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Counters"


      -
        name: list_floated
        type: *MDP
        use-name: scut-list-floated
        args:
          -
            variable: $space
            default: "false"
            comment: Spacing to separate the floated list items.
          -
            variable: $dir
            default: left
            comment: The `float` direction.
          -
            variable: $no-margin
            default: true
            comment: If `true`, top and bottom margins will be removed from the list.
        text: |
          Float the items of an unstyled list &mdash; to the left or to the right, with or without spacing between them.

          Use a floated list instead of an inline list when you want your list items snuggled right next to each other.

          Only the list's immediate children are floated (`ul > li`): Scut does not presume to know what you might plan to do with sub-lists.
        example:
          html: |
            <ul class="eg-list-floated m-1">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-floated m-2">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-floated m-3">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>

      -
        name: list_inline
        type: *MDP
        use-name: scut-list-inline
        args:
          -
            variable: $space
            default: "false"
            comment: Spacing to separate the inline list items.
          -
            variable: $no-margin
            default: true
            comment: If `true`, top and bottom margins will be removed from the list.
        text: |
          Inline the items of an unstyled list.

          ("Inline" is a hip new verb: deploy liberally.)

          Use an inline list if you don't mind your list items spaced out a little by default, like inline words. If you need them flush, with no interstitial space, try a [floated list](#list_floated).

          Only the list's immediate children are inlined (`ul > li`): Scut does not presume to know what you might plan to do with sub-lists.
        example:
          html: |
            <ul class="eg-list-inline m-1">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-inline m-2">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>

      -
        name: list_punctuated
        type: *MOP
        use-name: scut-list-punctuated
        args:
          -
            variable: $divider
            default: "\", \""
          -
            variable: $display
            default: inline
            comment: Change to `inline-block` if you don't want your list items spanning lines.
          -
            variable: $no-margin
            default: true
            comment: If `true`, top and bottom margins will be removed from the list.
        compatibility: |
          This utility uses the `:not` and `:last-child` selectors, which are not supported in IE8 without a polyfill.

        text: |
          Keep your HTML semantic and your punctuation traditional.

          Since the most common punctuated list uses commas, commas are the default `$divider` and the comma list is available as its own placeholder:

          - **`%scut-list-comma`**

          Only the list's immediate children are punctuated (`ul > li`): Scut does not presume to know what you might plan to do with sub-lists.
        example:
          html: |
            <ul class="eg-punctuated-list">
              <li>list item</li>
              <li>list item</li>
              <li>list item</li>
            </ul>
            <ul class="eg-semicolon-list">
              <li>list item</li>
              <li>list item</li>
              <li>list item</li>
            </ul>
            <ul class="eg-circle-list">
              <li>list item</li>
              <li>list item</li>
              <li>list item</li>
            </ul>

      -
        name: list_divided
        type: *MOP
        use-name: scut-list-divided
        args:
          -
            variable: $divider
            default: "\"|\""
          -
            variable: $space
            default: 0.5em
            comment: Spacing to separate your dividers (on both sides) from the your list items.
          -
            variable: $dir
            default: left
            comment: The `float` direction.
          -
            variable: $height
            default: false
            comment: Manually set a height for the list items so that you can use tall dividers. See examples below.
          -
            variable: $no-margin
            default: true
            comment: If `true`, top and bottom margins will be removed from the list.
        contentblock: |
          A content block passed to this mixin will be applied to the dividing pseudo-elements.

        text: |
          A floated list ([see above](#list_floated)) with a dividing pseudo-element between list items.

          A couple of common variations have their own placeholders:

          - **`%scut-list-bar`**
          - **`%scut-list-breadcrumb`**

          But, of course, all things are possible.

          The `$height` argument is kind of tricky: If you want a `$divider` taller than your list items, you need include a `$height` argument to ensure nice neat vertical alignment. See the example below for clarification.

          Only the list's immediate children are divided (`ul > li`): Scut does not presume to know what you might plan to do with sub-lists.
        example:
          html: |
            <ul class="eg-list-bar">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-breadcrumb">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-divided m-1">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>
            <ul class="eg-list-divided m-2">
              <li>list item 1</li>
              <li>list item 2</li>
              <li>list item 3</li>
            </ul>

      -
        name: margin
        type: *MO
        use-name: scut-margin
        args:
          -
            variable: $margin
            comment: |
              A list (1 to 4 values) will set margin rules on multiple sides. `n` abbreviates `null` and creates no rule.
        text: |
          A slight but useful variation on vanilla CSS's margin shorthand:

          Pass a list (1 to 4 values, not comma-separated) and `scut-margin` will

            - **create all margins as separate rules** (that is, it will not use the shorthand, but create `margin-top`, `margin-right`, etc.); and
            - **allow you to pass `n` to avoid creating a rule on any side**. (As elsewhere in Scut, `n` stands for `null` and results in no rule being created.)

          By using the mixin in this way, you will avoid some troubles that can occur when *changing* margins on an element, for whatever reason. *The point is to make it easier to override the values you want to override without affecting those you want to leave alone.*

        example:
          html: |
            <div class="eg-margin-container">
              <div class="eg-margin m-1">Variation 1</div>
            </div>
            <div class="eg-margin-container">
              <div class="eg-margin m-2">Variation 2</div>
            </div>
            <div class="eg-margin-container">
              <div class="eg-margin m-3">Variation 3</div>
            </div>

      -
        name: padding
        type: *MO
        use-name: scut-padding
        args:
          -
            variable: $padding
            comment: |
              A list (1 to 4 values) will set padding rules on multiple sides. `n` abbreviates `null` and creates no rule.
        text: |
          A slight but useful variation on vanilla CSS's padding shorthand:

          Pass a list (1 to 4 values, not comma-separated) and `scut-padding` will

            - **create all paddings as separate rules** (that is, it will not use the shorthand, but create `padding-top`, `padding-right`, etc.); and
            - **allow you to pass `n` to avoid creating a rule on any side**. (As elsewhere in Scut, `n` stands for `null` and results in no rule being created.)

          By using the mixin in this way, you will avoid some troubles that can occur when *changing* paddings on an element, for whatever reason. *The point is to make it easier to override the values you want to override without affecting those you want to leave alone.*

        example:
          html: |
            <div class="eg-padding-container">
              <div class="eg-padding m-1">Variation 1</div>
            </div>
            <div class="eg-padding-container">
              <div class="eg-padding m-2">Variation 2</div>
            </div>
            <div class="eg-padding-container">
              <div class="eg-padding m-3">Variation 3</div>
            </div>

      -
        group-start: positioning
        name: positioning_coordinates
        type: *MO
        use-name: scut-coords
        args:
          -
            variable: $coordinates
            default: [n n n n]
            comment: |
              A list: `top`, `right`, `bottom`, and `left` coordinates. `n` abbreviates `null`. `a` is interchangeable with `auto`. See below.
        text: |
          A shorthand for assigning coordinates to an element.

          You *may* want to use this mixin on its own &mdash; but **this mixin's primary purpose is to facilitate the positioning mixins below**, which pair your coordinates with a `position` value.

          Some guidlines for this mixin and its followers:

          - **`n` (the default value) signifies `null` or "nothing" or "no"** &mdash; so any coordinate assigned `n` is simply ignored, creating no rule in your compiled CSS.
          - **`a` can abbreviate `auto`** (both will work).
          - **All four values must be passed**, so use `n` as needed.

          The mixins below (and their examples) below further illustrate how this works.

      -
        name: positioning_absolute
        type: *MDP
        use-name: scut-absolute
        args:
          -
            variable: $coordinates
            default: [0 n n 0]
            comment: &SEEC "<a href=\"#positioning_coordinates\">See information about `coordinates` above.</a>"
        text: |
          Absolutely position an element and assign its coordinates, all in one line of SCSS. You'll save years of your life, and probably lose weight.
        example:
          html: |
            <div class="eg-absolute-container">
              <div class="eg-absolute m-1">Top left</div>
              <div class="eg-absolute m-2">Bottom right</div>
            </div>
          show-html: true

      -
        name: positioning_relative
        type: *MO
        use-name: scut-relative
        args:
          -
            variable: $coordinates
            default: [n n n n]
            comment: *SEEC
        text: |
          Relatively position an element and assign its coordinates, all in one line of SCSS.
        example:
          html: |
            <p>Some of <span class="eg-relative m-1">these</span> words <span class="eg-relative m-2">are</span> positioned in <span class="eg-relative m-3">strange</span> ways.</p>

      -
        name: positioning_fixed
        type: *MDP
        use-name: scut-fixed
        args:
          -
            variable: $coordinates
            default: [n n n n]
            comment: *SEEC
        text: |
          Fixedly (*fix-ed-lee*) position an element and assign its coordinates.

          No example is provided because it would spoil this nice documentation. Check out the positioning mixins above and you'll get the picture.

      -
        name: ratio-box
        type: *MDP
        use-name: scut-ratio-box
        args:
          -
            variable: $ratio
            default: 1/1
            comment: "The ratio-box's ratio: a fraction signifying width / height. The default, 1/1, is a square. Photos and videos usually come in 4/3 or 16/9 ratios."
        text: |
          Give an element with unknown or fluid width a fixed aspect ratio.

          This is especially useful if you want a `background-image` to preserve a ratio as a regular `<img>` can. (For more details on how you might tailor the presentation of those `background-image`s, have a look at the Nicholas Gallagher reference below.)

          **An important note: Any content you put inside the ratio-boxes needs to be absolutely positioned.** Otherwise it will screw with the ratio. So `position: relative` is set on the ratio-box to ease that. See the last example.
        example:
          html: |
            <p>These containers have different widths, but the ratio-boxes remain squares.</p>
            <div class="eg-ratio m-1"></div>
            <div class="eg-ratio m-2"></div>
            <p>And the same principle applies to these, which maintain a 16/9 ratio and use a different classname for the inner element:</p>
            <div class="eg-ratio m-3"></div>
            <div class="eg-ratio m-4">
              <div class="eg-ratio-inner">Content inside</div>
            </div>
          show-html: true
        references:
          -
            description: "Thierry Koblentz: \"Creating Intrinsic Ratios for Video\" (<cite>A List Apart</cite>)"
            url: "http://alistapart.com/article/creating-intrinsic-ratios-for-video"
          -
            description: "Nicholas Gallagher: \"Flexible CSS Cover Images\""
            url: "http://nicolasgallagher.com/flexible-css-cover-images/"

      -
        name: size
        type: *MO
        use-name: scut-size
        args:
          -
            variable: $size
            comment: A single value will make a square; a list of two (`width` then `height`) will make a rectangle.
        text: |
          Define both of an element's dimensions in one fell swoop.

          [(You may want to read about the origin of the phrase "one fell swoop.")](http://www.straightdope.com/columns/read/1698/whats-the-origin-of-one-fell-swoop)

          If a single value is passed, it will be applied to both `width` and `height`, producing a square. To make a rectangle, pass a two-value list: `width` then `height`.
        example:
          html: |
            <div class="eg-size m-1">A square</div>
            <div class="eg-size m-2">A rectangle</div>
      -
        name: sticky_footer
        type: *MO
        use-name: scut-sticky-footer
        args:
          -
            variable: $height
            comment: The height of the footer
          -
            variable: $wrapper
            default: "\".wrapper\""
            comment: A CSS selector for the page-wrapper element. *Wrap your selector in quotes.*
          -
            variable: $footer
            default: "\".scut-sticky\""
            comment: A CSS selector for the footer. Wrap your selector in quotes.
        text: |
          Ensure that your footer stays down at the bottom of the viewport, where God intended it to be, even if your content is too short to keep it down naturally. Avoid the weird look people give you when they see your footer in the middle of their browser window and unsettling emptiness beneath.

          This one takes some commitment &mdash; but nothing you can't handle:

          - **Your sticky footer must have a fixed height.**
          - **Your stuff-above-the-footer must be wrapped in a wrapper element.** (The footer itself remains outside of this wrapper.)

          **This mixin should not be invoked within a declaration block &mdash; i.e. don't nest it.** The mixin needs to add rules for a number of elements &mdash; `html`, `body`, the wrapper, and the footer &mdash; so it can't be restricted to the context of a different selector.

          Since an example of this utility requires its own `<html>` and `<body>` elements, **[this example is relegated to Codepen](http://codepen.io/davidtheclark/pen/ExjiF)**.


        references:
          -
            description: "CSS-Tricks: \"Sticky Footer\""
            url: http://css-tricks.com/snippets/css/sticky-footer/

      -
        group-start: vertically_center
        name: v-center_line-height
        type: *MO
        use-name: scut-vcenter-lh
        args:
          -
            variable: $height
        text: |
          Vertically center text (or other inline elements) by equalizing an element's `height` and `line-height`.

          Although this method is soothingly, reassuringly simple, requiring none of the extra `<div>`'s that make us all second-guess ourselves, it is also limited. **This method only works for inline content (usually text) that will not exceed a single line.** So it's good for buttons and headings with backgrounds and things like that.

          If you need to vertically center something else, try one of the mixins below.
        example:
          html: |
            <button class="eg-vcenter-lh m-1">Vertically centered text</button>
            <button class="eg-vcenter-lh m-2">Same height, smaller font-size</button>

      -
        name: v-center_inline-block
        type: *MDP
        use-name: scut-vcenter-ib
        args:
          -
            variable: $inner
            default: "\".scut-inner\""
            comment: &IE A CSS selector for the inner element. *Wrap your selector in quotes.*
        text: |
          Vertically center *an inner element* with the `inline-block` method.

          **This method requires a container and an inner element.** The mixin applies to the container; the to-be-centered inner element is passed (by its selector) as an argument.

          Any to-be-centered element should be an *immediate child* of the container (`container > inner`).

          A word of caution: Because `inline-block` results in some unpredictable word-like spacing, this method doesn't always work well if you require exact widths (or if your inner element has a 100% width). If you require exactitude and nothing stands in the way of giving your container `display: table`, try [vertically centering via table display](#v-center_table_display).
        example:
          html: |
            <div class="eg-vcenter-ib m-1">
              <p class="scut-inner">
                A vertically centered element, with the default classname "scut-inner".
              </p>
            </div>
            <div class="eg-vcenter-ib m-2">
              <p class="eg-vcenter-ib-inner">
                A vertically centered element, with its own special classname.
              </p>
            </div>
          show-html: true

        references:
          -
            description: "CSS-Tricks: \"Centering in the Unknown\""
            url: http://css-tricks.com/centering-in-the-unknown/

      -
        name: v-center_table_display
        type: *MDP
        use-name: scut-vcenter-td
        args:
          -
            variable: $inner
            default: "\".scut-inner\""
            comment: *IE
        text: |
          Vertically center *the content of an inner element* with the `display: table` method.

          **This method requires a container and an inner element.** The mixin applies to the container; the to-be-centered inner element is passed (by its selector) as an argument.

          Any to-be-centered element should be an *immediate child* of the container (`container > inner`).

        example:
          html: |
            <div class="eg-vcenter-td m-1">
              <span class="scut-inner">
                A vertically centered span, with the default classname "scut-inner".
              </span>
            </div>
            <div class="eg-vcenter-td m-2">
              <div class="eg-vcenter-td-inner">
                A vertically centered div, with its own special classname.
              </div>
            </div>
          show-html: true

        references:
          -
            description: "CSS-Tricks: \"Centering in the Unknown\""
            url: http://css-tricks.com/centering-in-the-unknown/

      -
        name: v-center_transform
        type: *MP
        use-name: scut-vcenter-tt
        compatibility: |
          This utility uses a CSS `transform`, so will not work with IE8. Also note that `transform` requires vendor prefixes (which are included).
        text: |
          Vertically center an element using the clever `transform` method.

          **This utility is simply an alias for <a href="#center_transform">`scut-center-transform`</a>, but centering only on the vertical axis.** It's included to fit with the `vcenter` naming convention.

          So see the examples for <a href="#center_transform">`scut-center-transform`</a>.

  -
    category: typography
    items:

      -
        name: bookends
        type: *MO
        use-name: scut-bookends
        args:
          -
            variable: $space
            default: 0.5em
            comment: Spacing to separate the bookends from the element's content
          -
            variable: $content
            default: "\"\""
            comment: One or two `content` values for the pseudo-elements. Use a list to pass different content values to the left (`:before`) and right (`:after`), respectively; or pass one value to both.
        contentblock: |
          A content block passed to this mixin will be applied to both `:before` and `:after` pseudo-elements.
        text: |
          Install and style pseudo-elements on both sides of something.

          A common typographical usage is to place decorative ornaments on either side of some heading. But the mixin can prove useful for anything that involves pseudo-elements on both sides. Absolutely anything.

          Pass `false` as both arguments if you want to modify bookend pseudo-elements that have already been created. See example variation 3.

        example:
          html: |
            <div class="eg-bookends m-1">Variation 1</div>
            <div class="eg-bookends m-2">Variation 2</div>
            <button class="eg-bookends m-3">Variation 3</button>
            <div class="eg-bookends m-4">Variation 4</div>

      -
        name: characters
        type: variables
        use-name: $scut-[something]
        text: |
          A set of variables providing CSS-friendly Unicode character-codes for the kinds of typographic glyphs you may find yourself adding to your stylesheets as `content` values.

          Instead of looking them up every time, use a variable.

          The names of these variables often correspond with HTML character entity references that you can use in your markup. For example, `$scut-nbsp` is the same character as `&nbsp;` in HTML.

      -
        name: font-face
        type: *MO
        use-name: scut-font-face
        args:
          -
            variable: $font-family
            comment: A name for the font.
          -
            variable: $file-path
            comment: The relative path to the font's files, **including the files' common path and name and excluding their extensions**.
          -
            variable: $weight
            default: normal
            comment: "A `font-weight` value. **This argument is *optional*: you can just leave it out for your italic non-bold fonts.** See the example below."
          -
            variable: $style
            default: normal
            comment: A `font-style` value.
          -
            variable: $formats
            default: eot woff ttf svg
            comment: "The font formats that you would like to include (in case you don't have them all, or you want to thin out your code for modern browsers, or whatever your private reasons)."
        text: |
          Implement cross-browser `@font-face` with the greatest of ease.

          The method Scut uses is that advocated by CSS-Tricks and used by Font Squirrel (see references). It solves all kinds of cross-browser issues going all the way back to IE6.

          For example, to implement all varieties of Arvo:
          <pre class="language-scss"><code>@include scut-font-face("Arvo", "fonts/arvo-regular-webfont");
          @include scut-font-face("Arvo", "fonts/arvo-bold-webfont", bold);
          @include scut-font-face("Arvo", "fonts/arvo-italic-webfont", italic);
          // or @include scut-font-face("Arvo", "fonts/arvo-italic-webfont", normal, italic);
          @include scut-font-face("Arvo", "fonts/arvo-bolditalic-webfont", bold, italic);</code></pre>

          If, for whatever reason, you do not want to include all of the default formats that are required for the far-far-back cross-browser compatibility (`eot`, `woff`, `ttf`, and `svg`), then include your own `$formats` list, e.g.:
          <pre class="language-scss"><code>@include scut-font-face("Arvo", "fonts/arvo-regular-webfont", $formats: woff ttf);</code></pre>


        references:
          -
            description: "CSS-Tricks: \"Using @font-face\""
            url: http://css-tricks.com/snippets/css/using-font-face/
          -
            description: "Fontspring: \"The New Bulletproof @Font-Face Syntax\""
            url: http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax

      -
        name: hanging_indent
        type: *MDP
        use-name: scut-hanging-indent
        args:
          -
            variable: $indent
            default: 1em
        text: |
          The "hanging indent" applies to all lines but the first &mdash; as opposed to the "normal" indent, applying to only the first line, that you're accustomed to from those print publications you may have seen.

          My&nbsp;<cite>Chicago Manual of Style</cite>&nbsp;also calls it the <i>flush-and-hang</i> style. I like that.

          Hanging indents are standard fare for indexes and works cited, but may seem obscure to you if you're no scholar ... until one day you realize that you do need them, and have needed them all along ...
        example:
          html: |
            <div class="eg-hanging-indent m-1">Lastname, Firstname. <cite>Title of the Work</cite>. City, State: Publisher, YEAR. Print.
            </div>
            <div class="eg-hanging-indent m-2">Lastnameofanotherlady, Firstname. <cite>Title of Another Work</cite>. City, State: Publisher, YEAR. Print.
            </div>

      -
        name: indented_paragraphs
        type: *MDP
        use-name: scut-indented-ps
        args:
          -
            variable: $indent
            default: 1.5em
          -
            variable: $no-first-indent
            default: "true"
            comment: It is a not uncommon printing practice to leave the first paragraph un-indented.
        text: |
          Indent paragraphs &mdash; as tends to happen in those "books" and "magazines" that old people read.
        example:
          html: |
            <div class="eg-indented-ps m-1">
              <div><strong>Default</strong></div>
              <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.</p>
              <p>Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>
              <p>Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim.</p>
              <p>Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.</p>
            </div>
            <div class="eg-indented-ps m-2">
              <div><strong>Variant</strong></div>
              <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.</p>
              <p>Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.</p>
              <p>Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim.</p>
              <p>Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.</p>
            </div>

      -
        name: key-value
        type: *MDP
        use-name: scut-key-val
        args:
          -
            variable: $divider
            default: "\":\""
            comment: Content (most likely punctuation) to divide the term from the description.
          -
            variable: $pad
            default: 0.25em
            comment: Horizontal space between the `$divider` and the description.
          -
            variable: $indent
            default: 1em
            comment: Indentation of the description.
          -
            variable: $spacing
            default: 0
            comment: Vertical space between term-description pairs.
          -
            variable: $pad-left
            default: 0
            comment: Horizontal space between the `$divider` and the term.
        text: |
          You've probably been wondering how to *semantically mark-up your lists of keys and values* &mdash; your labelled bits of information. You've probably been gnawing your fingernails to nubs, panicked with uncertainty. Well wait 'till you hear this: The answer seems to be *description (or <i>association</i>) lists* &mdash; the `<dl>`, `<dt>`, and `<dd>` elements. (See the References listed below.)

          WhatWG says "The dl element represents an association list consisting of zero or more name-value groups (a description list)." There you have it.

          One traditional manner of *styling* such assocation (description) lists is with colon-separated name-value pairs, the first line flush left and following lines indented (the fabled ["hanging indent"](#hanging_indent)). This mixin should help make that dream a reality. And it also enables many other common key-value formats, a couple of which are shown in the examples below.

          **Apply the mixin to your `<dl>` element.**
        example:
          html: |
            <dl class="eg-key-val m-1">
              <dt>Name</dt>
              <dd>Lorem Ipsum</dd>
              <dt>Occupation</dt>
              <dd>Placeholder</dd>
              <dt>Children</dt>
              <dd>None</dd>
              <dt>Excuses</dt>
              <dd>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. </dd>
            </dl>
            <dl class="eg-key-val m-2">
              <dt>Consolation</dt>
              <dd>Alleviation of misery or distress of mind</dd>
              <dt>Depression</dt>
              <dd>A sinking of the spirits</dd>
              <dt>Equanimity</dt>
              <dd>A state of resistance to elation, depression, anger, etc.</dd>
            </dl>
            <dl class="eg-key-val m-3">
              <dt>Doom</dt>
              <dd>Fate decreed or determined; fixed fortune; irrevocable destiny.</dd>
              <dt>Waggle</dt>
              <dd>To cause to wag frequently and with short motions; move first one way and then the other.</dd>
              <dt>Pantaloon</dt>
              <dd>In early Italian comedy, a character usually represented as a lean and foolish old man (properly a Venetian), wearing spectacles and slippers.</dd>
            </dl>
          show-html: true
        references:
          -
            description: WhatWG on the `<dl>` element
            url: "http://www.whatwg.org/specs/web-apps/current-work/multipage/grouping-content.html#the-dl-element"
          -
            description: HTML5 Doctor on the `<dl>` element
            url: "http://html5doctor.com/the-dl-element/"

      -
        name: link_bottom-bordered
        type: *MDP
        use-name: scut-link-bb
        args:
          -
            variable: $color
            default: inherit
            comment: A `border-bottom-color` value.
          -
            variable: $style
            default: solid
            comment: A `border-bottom-style` value.
          -
            variable: $width
            default: 1px
            comment: A `border-bottom-width` value.
        text: |
          Replace standard link underlining with a bottom border.

          People seem to like this trick, at least some people, because it provides a little extra space between the text and the line. Other pleasing effects are also possible by passing arguments.

          Of course, as always, you can add your own rules after the mixin to further customize. For example, if you want to define a special color for the bottom-border on hover, just do it (see the example below).
        example:
          html: |
            <p class="eg-link-bb m-1">Default values: <a href="#link-with-bottom-border">Link text</a></p>
            <p class="eg-link-bb m-2">Variant values: <a href="#link-with-bottom-border">Link text</a></p>

      -
        name: reverse_italics
        type: *MDP
        use-name: scut-reverse-italics
        args:
          -
            variable: $elements
            default: "false"
            comment: "A list (not comma separated) of CSS selectors for elements that you do not want italicized (`<em>`, `<cite>`, and `<i>` are already taken care of: see below). *Wrap your selectors in quotes.*"
        text: |
          Italicize a section of text while de-italicizing those elements that would normally be italicized. Stand the world on its head.

          This is common typographical practice. In non-italicized text, italics provide mild stress; but in an italicized passage, it is the *non-italicized* text that is stressed. (Everything is relative and nothing means anything.)

          The elements `<em>`, `<cite>`, and `<i>`, which browsers typically italicize, are by default de-italicized. To de-italicize more elements, include their selectors in a list that you pass to the mixin.

        example:
          html: |
            <p class="eg-reverse-italics m-default">DEFAULT:
              <em>Some &lt;em&gt; text</em> sit amet, consectetuer adipiscing elit.
              <cite>Some &lt;cite&gt; text</cite>, aenean commodo ligula eget dolor.
              <strong>Some &lt;strong&gt; text</strong> Cum sociis natoque penatibus
              <i>some &lt;i&gt; text</i> et magnis dis parturient montes, nascetur ridiculus mus
              <b>some &lt;b&gt; text</b>.
              <span class="no-italics">And a &lt;span&gt; with the classname "no-italics".</span>
            </p>
            <p class="eg-reverse-italics m-variant">VARIANT:
              <em>Some &lt;em&gt; text</em> sit amet, consectetuer adipiscing elit.
              <cite>Some &lt;cite&gt; text</cite>, aenean commodo ligula eget dolor.
              <strong>Some &lt;strong&gt; text</strong> Cum sociis natoque penatibus
              <i>some &lt;i&gt; text</i> et magnis dis parturient montes, nascetur ridiculus mus
              <b>some &lt;b&gt; text</b>.
              <span class="no-italics">And a &lt;span&gt; with the classname "no-italics".</span>
            </p>
          show-html: true

      -
        name: side-lined
        type: *MDP
        use-name: scut-side-lined
        args:
          -
            variable: $height
            default: 1px
            comment: The height of the lines.
          -
            variable: $space
            default: 0.5em
            comment: Spacing to separate the text and the lines.
          -
            variable: $color
            default: inherit
            comment: The color of the lines.
          -
            variable: $style
            default: solid
            comment: The `border-style` of the lines.
          -
            variable: $v-adjust
            default: false
            comment: Vertical adjustment to the lines, adding space *from the bottom*. See examples below.
          -
            variable: $double
            default: false
            comment: Double your lines by adding *a value for the distance between the two lines you want*.
        text: |
          Woman- and mankind have always loved this flourish: horizontal lines extending from either side of center-aligned text.

          Look at the examples below. You want to do that!

          By default, the lines will be vertically aligned with the text's centerline &mdash; but sometimes that will look off to your discerning eye, and you'll want to tweak that vertical position. So add some height to the `$v-adjust` argument, which will push your lines up, away from the bottom of the element.

          By default, the mixin produces one line; but if you add a height value to the `$double` argument, you'll get two lines (separated by that height). (You could also use a `$style` of `double`, which would act the same as any double border-style.)
        example:
          html: |
            <p class="eg-side-lined m-1">Variation 1</p>
            <p class="eg-side-lined m-2">Variation 2</p>
            <p class="eg-side-lined m-3">Variation 3</p>
            <p class="eg-side-lined m-4">Variation 4</p>

      -
        name: truncate
        type: *MDP
        use-name: scut-truncate
        text: |
          Truncate text to a single line, clipped with an ellipsis.

          A quick and dirty method of tailoring content to layout. In order to truncate without clipping words, truncate to character counts, or truncate multi-line strings generally, the most reliable and flexible methods seem to lie outside of CSS (i.e. in your templating language, or JavaScript, etc.).
        example:
          html: |
            <div class="eg-truncate">This string of text is bound to be longer than a single line will allow but you will not see the whole thing because it will be truncated at the end of the displayed line and ended with an ellipsis and just to ensure that that example works even on your gigantic fancy-boy screen I'll duplicate that sentence content starting now this string of text is bound to be longer than a single line will allow but you will not see the whole thing because it will be truncated at the end of the displayed line and ended with an ellipsis.</div>
          show-html: true

  -
    category: functions
    items:

      -
        name: pixels-to-ems
        type: function, with an exposed settings-variable
        use-name: scut-em
        args:
          -
            variable: $pixels
            comment: The `px`-value you wish to convert to `em`s. No `px` unit necessary (e.g. `20` is fine, so is `20px`). *Passing a list will result in a list of `rem` values* (see examples).
          -
            variable: $base
            default: 16
            comment: A base-value with which to calculate the `em`-value. If there are no units, it's interpreted as *pixels*; but you can use `em`-values, as well. **The `$base` default value can be changed for your project by setting your own `$scut-em-base` variable prior to using this function** (see examples).
        text: |
          Convert pixel-values to `em`-values &mdash; with flexibility for situations in which the `em`-value has to be calculated in relation to something other than a default `16px font-size`. *Pass a single value or a list of values.*

          This function eases the burden on those who build flexible, `em`-based layouts but still find themselves thinking in pixels or using tools that speak in pixels.

          If a `$base` argument is provided, the `em`-value will be calculated relative to that `$base` (by default, `$base` is assumed to be `16`). If that `$base` is in pixels, everything should work smoothly, no questions asked. *You can also provide a `$base` in ems* &mdash; but this is trickier: it will only work if your `em`s are not more than one layer deep.

          <small>(For example, if your element is the child of a container whose `font-size` is an `em`-value other than `1em`, you can pass the `font-size` as the `$base` argument and everything will work fine (see example variations 5 and 6), But if the container has a `font-size` in `em`s (not `1em`), and a child of it has a `font-size` in `em`s (also not `1em`), and your messing with a grandchild ... things will go wrong. So, again, I don't suggest trying to use this function three or more levels deep in `em`s.)</small>

          **If you're worried about these nesting issues and want to use `rem` units, instead, try the [`scut-rem` function, below](#pixels-to-rems) or the [`scut-rem-fallback` mixin, above](#rems_with_fallback).**

        example:
          html: |
            <div class="eg-em-c">
              <div class="eg-em m-1">
                Variation 1: 300px wide, in ems
              </div>

              <div class="eg-em m-2">
                Variation 2: 300px wide, in regular pixels (for reference)
              </div>

              <div class="eg-em m-3">
                Variation 3: 400px wide, in ems, with a different base size in px
              </div>

              <div class="eg-em m-4">
                Variation 4: 400px wide, in pixels, with a different base size in px
              </div>

              <div class="eg-em m-5">
                Variation 5: 500px wide, in ems, with a different base size in ems
              </div>

              <div class="eg-em m-6">
                Variation 6: 500px wide, in pixels, with a different base size in ems
              </div>

              <div class="eg-em m-7">
                Variation 7: Demonstrating a list of values being passed, as well as the option of including or leaving out the px unit.
              </div>

              <div class="eg-em m-8">
                Variation 8: You can change the default $base value to avoid setting it manually over and over again.
              </div>
            </div>

      -
        name: pixels-to-rems
        type: function
        use-name: scut-rem
        args:
          -
            variable: $pixels
            comment: |
              The `px`-value you wish to convert to `rem`s. No `px` unit necessary (e.g. `20` is fine, so is `20px`). *Passing a list will result in a list of `rem` values* (see examples).
        compatibility: |
          IE8 and Opera Mini do not support `rem` units. If you want to support these browsers you must provide a fallback in pixels &mdash; which Scut can do with the [`scut-rem-fallback` mixin, above](#rems_with_fallback).
        text: |
          Convert pixel-values to `rem`-values. *Pass a single value or a list of values.*

          ***Note: The base pixel value with which to calculate your `rem`-value is by default `16px`: to change this for your project, you can set your own `$scut-rem-base` variable prior to using this function***. *(Unlike [`scut-em`](#pixels-to-ems), it is presumed that you will only need to set this variable *once* per project, so it is not also an argument in the function.)*

          Like [`scut-em`](#pixels-to-ems), above, this function makes (limited parts of) life easier for those of us who appreciate the many benefits of relative units but still find themselves thinking in pixels, or (what's especially common) using tools that speak in pixels.

          For a good description of the differences between `em` and `rem` units, coupled with some examples of why `rem`s are handy, read ["In Defense of Rem Units" on the Harvest blog](http://techtime.getharvest.com/blog/in-defense-of-rem-units). For an alternative perspective, in favor of `em`s, try [Filament Group's  "On ems and rems"](http://filamentgroup.com/lab/on_ems_and_rems/). The example below illustrates the main difference: `rem`s are always relative to the root `html` element, not to the subject-element's parent.

          **Please note the compatibility issue with this utility: If you need `px`-value fallbacks to support IE8 and Opera Mini, use the [`scut-rem-fallback` mixin](#rems_with_fallback) instead of this function.**

          If you're really worried about this compatibility issue, you might also consider using [`scut-em`](#pixels-to-ems), instead.
        example:
          html: |
            <div class="eg-rem m-1">
              Variation 1: 24px font-size, in regular pixels
            </div>

            <div class="eg-rem m-2">
              Variation 2: 24px font-size converted to rems
            </div>

            <div class="eg-rem-c">
              <div class="eg-rem m-3">
                Variation 3: 24px font-size wide in rems, nested inside a div with a font-size of 1000px. No effect!
              </div>
            </div>

            <div class="eg-rem m-4">
              Variation 4: Showing that a list of px values can be passed, and that the px unit is optional.
            </div>
          show-html: true



      -
        name: strip_unit
        type: function
        use-name: scut-strip-unit
        args:
          -
            variable: $num
            comment: The number whose units you want to strip.
        text: |
          Strip the unit from a number.

          This becomes useful when you are building your own mixins and functions and find yourself in an error-littered tangle of units. With this function you can just ditch those units, then put them back later.

          No example necessary.

help:
  -
    term: use-name
    text: |
      **use-name** is the name of the utility as it is used (as a mixin, placeholder, function, variable, etc.), including the `scut-` prefix. It's what you plug into your Sass/SCSS. This should be illustrated in the examples.
  -
    term: type
    text: |
      **type** tells you what kind of Sass feature the utility involves. Is it only available as a mixin (e.g. HD breakpoint)? Or as a mixin and a placeholder that always do the same thing (e.g. clearfix)? Or as a mixin and a placeholder that passes default values (e.g. indented paragraphs)? Or as a mixin with some extension placeholders for common variations (e.g. punctuated list)? As a function, a variable, an import? And so on.
  -
    term: arguments
    text: |
      **arguments** lists the arguments, in order, that you can pass to the utility's mixin. To learn more about Sass/SCSS mixin arguments [have a look at the Sass documentation](http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#mixin-arguments).

      If no default value is listed, that means there is no default value, so you'll have to provide a value every time you use the mixin.
  -
    term: contentblock
    text: |
      **@content** describes what happens if you pass a content block to the utility's mixin. To understand Sass content blocks, [have a look at the Sass documentation](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixin-content).
